{
  "compilerOptions": {
    /** Language and Environment */
    "target": "ES5" /** Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
    "lib": [
      "es5",
      "es6",
      "dom",
      "dom.iterable"
    ] /** Specify a set of bundled library declaration files that describe the target runtime environment. */,

    /** Modules */
    "module": "esnext" /** Specify what module code is generated. */,
    "moduleResolution": "node" /** Specify how TypeScript looks up a file from a given module specifier. */,
    "resolveJsonModule": true /** Resolve modules using the Node.js JSON module resolution algorithm. */,
    "isolatedModules": true /** Specify whether to use the ES2015 language standard when targeting ES2015 or later. */,
    "baseUrl": "./src" /** Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project. */,
    "jsx": "react" /** Emit ECMAScript-standard-compliant class fields. */,

    /** JavaScript Support */
    "allowJs": false /** Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */,
    "checkJs": false /** Enable error reporting in type-checked JavaScript files. */,

    /** Emit */
    "removeComments": true /** Disable emitting comments. */,
    "incremental": true /** Enable incremental compilation. */,
    "preserveConstEnums": true /** Preserve constant enum declarations. */,
    "sourceMap": false /** Generates corresponding source maps. */,
    // "declaration": true,                                       /** Generates a declaration .d.ts file. */
    // "declarationDir": "types",                                 /** Specify the location for generated declaration files. */
    "outDir": "build" /** The directory where the output file is saved. */,

    /** Interop Constraints */
    "allowSyntheticDefaultImports": true /** Allow 'import x from y' when a module doesn't have a default export. */,
    "esModuleInterop": true /** Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */,
    "forceConsistentCasingInFileNames": true /** Ensure that casing is correct in imports. */,
    "allowUnreachableCode": false /** Allow unreachable code. */,

    /** Type Checking */
    "strict": true /** Enable all strict type-checking options. */,
    "alwaysStrict": true /** Enable all strict type-checking options in function and method declarations. */,
    "noImplicitAny": true /** Enable error reporting for expressions and declarations with an implied `any` type.. */,
    "strictNullChecks": true /** When type checking, take into account `null` and `undefined`. */,
    "noEmitOnError": true /** Do not emit output if there are errors. */,
    "strictFunctionTypes": true /** When assigning functions, check to ensure parameters and the return values are subtype-compatible. */,
    "strictBindCallApply": true /** Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */,
    "strictPropertyInitialization": true /** Check for class properties that are declared but not set in the constructor. */,
    "suppressImplicitAnyIndexErrors": true /** Suppress the error when an index expression in an array literal cannot be found. */,
    "noImplicitThis": true /** Enable error reporting when `this` is given the type `any`. */,
    "noUnusedLocals": true /** Enable error reporting when a local variables aren't read. */,
    "noUnusedParameters": true /** Raise an error when a function parameter isn't read */,
    "noImplicitReturns": true /** Enable error reporting for codepaths that do not explicitly return in a function. */,
    "noFallthroughCasesInSwitch": true /** Enable error reporting for fallthrough cases in switch statements. */,

    /** Completeness */
    "skipLibCheck": true /** Skip type checking all .d.ts files. */
  },

  "include": ["**/**.ts", "**/**.tsx", "**/**.js"],
  "exclude": ["node_modules"]
}
